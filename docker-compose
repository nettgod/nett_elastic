version: "3.8"

# ----- Volumes & Network -----
volumes:
  certs:
  esdata01:
  kibanadata:
  metricbeatdata01:
  filebeatdata01:
  logstashdata01:

networks:
  elastic:
    name: elastic
    external: false

# ----- Default env (override ได้ด้วยตัวแปรแวดล้อมขณะรัน) -----
x-default-env: &defaults
  STACK_VERSION: ${STACK_VERSION:-8.7.1}
  ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-changeme}
  KIBANA_PASSWORD: ${KIBANA_PASSWORD:-changeme}
  CLUSTER_NAME: ${CLUSTER_NAME:-docker-cluster}
  LICENSE: ${LICENSE:-basic}
  ES_PORT: ${ES_PORT:-9200}
  KIBANA_PORT: ${KIBANA_PORT:-5601}
  ES_MEM_LIMIT: ${ES_MEM_LIMIT:-1073741824}
  KB_MEM_LIMIT: ${KB_MEM_LIMIT:-1073741824}
  LS_MEM_LIMIT: ${LS_MEM_LIMIT:-1073741824}
  ENCRYPTION_KEY: ${ENCRYPTION_KEY:-c34d38b3a14956121ff2170e5030b471551370178f43e5626eec58b04a30fae2}

services:
  # ----- One-time setup: generate CA & node certs -----
  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION:-8.7.1}
    container_name: setup
    user: "0"
    networks: [elastic]
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
    environment: *defaults
    command: >
      bash -c '
        set -euo pipefail;
        if [ x${ELASTIC_PASSWORD} = x ]; then echo "Set ELASTIC_PASSWORD"; exit 1; fi;
        if [ x${KIBANA_PASSWORD} = x ]; then echo "Set KIBANA_PASSWORD"; exit 1; fi;
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip -q config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          cat > config/certs/instances.yml <<EOF
instances:
  - name: es01
    dns: [ "es01", "localhost" ]
    ip: [ "127.0.0.1" ]
  - name: kibana
    dns: [ "kibana", "localhost" ]
    ip: [ "127.0.0.1" ]
  - name: logstash01
    dns: [ "logstash01" ]
  - name: metricbeat01
    dns: [ "metricbeat01" ]
  - name: filebeat01
    dns: [ "filebeat01" ]
EOF
          bin/elasticsearch-certutil cert --silent --pem \
            --in config/certs/instances.yml \
            --out config/certs/certs.zip;
          unzip -q config/certs/certs.zip -d config/certs;
        fi;
        # permissions
        chown -R root:root config/certs;
        find config/certs -type d -exec chmod 0755 {} \;;
        find config/certs -type f -exec chmod 0644 {} \;;
        # wait forever (healthcheck will mark healthy when files exist)
        sleep 1d
      '
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/es01/es01.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120

  # ----- Elasticsearch (single node) -----
  es01:
    depends_on:
      setup: { condition: service_healthy }
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION:-8.7.1}
    container_name: es01
    networks: [elastic]
    labels:
      co.elastic.logs/module: elasticsearch
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - esdata01:/usr/share/elasticsearch/data
    ports:
      - "${ES_PORT:-9200}:9200"
    environment:
      - node.name=es01
      - cluster.name=${CLUSTER_NAME:-docker-cluster}
      - discovery.type=single-node
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD:-changeme}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es01/es01.key
      - xpack.security.http.ssl.certificate=certs/es01/es01.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es01/es01.key
      - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE:-basic}
    mem_limit: ${ES_MEM_LIMIT:-1073741824}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test: ["CMD-SHELL", "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'"]
      interval: 10s
      timeout: 10s
      retries: 120

  # ----- Kibana -----
  kibana:
    depends_on:
      es01: { condition: service_healthy }
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION:-8.7.1}
    container_name: kibana
    networks: [elastic]
    labels:
      co.elastic.logs/module: kibana
    volumes:
      - certs:/usr/share/kibana/config/certs
      - kibanadata:/usr/share/kibana/data
    ports:
      - "${KIBANA_PORT:-5601}:5601"
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=https://es01:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD:-changeme}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
      - XPACK_SECURITY_ENCRYPTIONKEY=${ENCRYPTION_KEY:-changemechangemechangeme}
      - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=${ENCRYPTION_KEY:-changemechangemechangeme}
      - XPACK_REPORTING_ENCRYPTIONKEY=${ENCRYPTION_KEY:-changemechangemechangeme}
    mem_limit: ${KB_MEM_LIMIT:-1073741824}
    healthcheck:
      test: ["CMD-SHELL", "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'"]
      interval: 10s
      timeout: 10s
      retries: 120

  # ----- Logstash (inline pipeline) -----
  logstash01:
    depends_on:
      es01: { condition: service_healthy }
    image: docker.elastic.co/logstash/logstash:${STACK_VERSION:-8.7.1}
    container_name: logstash01
    networks: [elastic]
    labels:
      co.elastic.logs/module: logstash
    environment:
      - LS_JAVA_OPTS=-Xms256m -Xmx256m
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD:-changeme}
    mem_limit: ${LS_MEM_LIMIT:-1073741824}
    volumes:
      - certs:/usr/share/logstash/config/certs
      - logstashdata01:/usr/share/logstash/data
    ports:
      - "5044:5044"   # beats input
      - "9600:9600"   # monitoring API
    command: >
      bash -c '
        cat > /usr/share/logstash/pipeline/logstash.conf <<EOF
input {
  beats { port => 5044 }
}
filter { }
output {
  elasticsearch {
    hosts => ["https://es01:9200"]
    user => "elastic"
    password => "${ELASTIC_PASSWORD}"
    ssl => true
    cacert => "/usr/share/logstash/config/certs/ca/ca.crt"
    index => "filebeat-%{+YYYY.MM.dd}"
  }
  stdout { codec => rubydebug }
}
EOF
        exec /usr/local/bin/docker-entrypoint
      '

  # ----- Metricbeat (inline metricbeat.yml) -----
  metricbeat01:
    depends_on:
      es01: { condition: service_healthy }
      kibana: { condition: service_healthy }
    image: docker.elastic.co/beats/metricbeat:${STACK_VERSION:-8.7.1}
    container_name: metricbeat01
    user: root
    networks: [elastic]
    volumes:
      - certs:/usr/share/metricbeat/certs
      - metricbeatdata01:/usr/share/metricbeat/data
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro
      - /proc:/hostfs/proc:ro
      - /:/hostfs:ro
    environment:
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD:-changeme}
      - ELASTIC_HOSTS=https://es01:9200
      - KIBANA_HOSTS=http://kibana:5601
      - LOGSTASH_HOSTS=http://logstash01:9600
    command: >
      bash -c '
        cat > /usr/share/metricbeat/metricbeat.yml <<EOF
metricbeat.config.modules:
  path: \${path.config}/modules.d/*.yml
  reload.enabled: false

metricbeat.modules:
- module: elasticsearch
  xpack.enabled: true
  period: 10s
  hosts: ["\${ELASTIC_HOSTS}"]
  ssl.certificate_authorities: "certs/ca/ca.crt"
  ssl.certificate: "certs/es01/es01.crt"
  ssl.key: "certs/es01/es01.key"
  username: \${ELASTIC_USER}
  password: \${ELASTIC_PASSWORD}
  ssl.enabled: true

- module: kibana
  xpack.enabled: true
  period: 10s
  hosts: ["\${KIBANA_HOSTS}"]

- module: logstash
  xpack.enabled: true
  period: 10s
  hosts: ["\${LOGSTASH_HOSTS}"]

- module: docker
  hosts: ["unix:///var/run/docker.sock"]
  period: 10s
  enabled: true

output.elasticsearch:
  hosts: ["\${ELASTIC_HOSTS}"]
  username: \${ELASTIC_USER}
  password: \${ELASTIC_PASSWORD}
  ssl.certificate_authorities: "certs/ca/ca.crt"
  ssl.enabled: true
setup.kibana.host: "\${KIBANA_HOSTS}"
EOF
        chown root:root /usr/share/metricbeat/metricbeat.yml && chmod 0644 /usr/share/metricbeat/metricbeat.yml;
        metricbeat -e
      '

  # ----- Filebeat (inline filebeat.yml) -----
  filebeat01:
    depends_on:
      es01: { condition: service_healthy }
      logstash01: { condition: service_started }
    image: docker.elastic.co/beats/filebeat:${STACK_VERSION:-8.7.1}
    container_name: filebeat01
    user: root
    networks: [elastic]
    labels:
      co.elastic.logs/module: filebeat
    volumes:
      - certs:/usr/share/filebeat/certs
      - filebeatdata01:/usr/share/filebeat/data
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD:-changeme}
    command: >
      bash -c '
        cat > /usr/share/filebeat/filebeat.yml <<EOF
filebeat.autodiscover:
  providers:
    - type: docker
      hints.enabled: true

# ส่งเข้า Logstash (ตัวอย่างพื้นฐานจากบทความ)
output.logstash:
  hosts: ["logstash01:5044"]

# เปิดให้ดูสถานะจาก stdout ด้วย
logging.to_files: false
EOF
        chown root:root /usr/share/filebeat/filebeat.yml && chmod 0644 /usr/share/filebeat/filebeat.yml;
        filebeat -e
      '
